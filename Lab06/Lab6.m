clear; clc;

%% Part 2
% Examine the data generated by pointclouds.m. In particular, make sure to look at a scatter plot of the data for
% example by using scatter(X(1,:),X(2,:),1,Y). Finally, use the k-means function to classify the data generated by
% pointclouds.m into five clusters.
% **************************************************************************************
% We plot the points in different colors corresponding to their labels. We
% also plot the means as triangles of the same color. Sorry yellow is hard
% to see, I don't know how to change it in Matlab.

X = pointclouds();
k = 5;
[mu, labels] = km(X, k);

figure()
hold on
scatter(X(1,:), X(2,:),1, labels);
scatter(mu(1,:), mu(2,:),[], 1:k, '^', 'filled');
hold off

%% Part 3
% Generate and turn in the classification result of your code for three separate runs of the k-means algorithm that lead to
% different results. This should be in the form of three scatter plots with the class assignments visually distinguished.
% **************************************************************************************
% It works different each time. I.e it finds different means because of the
% random initialization.

iter = 3;
figure()
tiledlayout(iter, 1);
axis equal;
for i = 1:iter
    [mu, labels] = km(X, k);

    nexttile;
    hold on
    scatter(X(1,:), X(2,:),1, labels);
    scatter(mu(1,:), mu(2,:),[], 1:k, '^', 'filled');
    hold off
end

%% Part 4
% Do the same for the pointrings.m dataset, again producing three distinct classification result figures.
% **************************************************************************************

X = pointrings();

iter = 3;
figure()
tiledlayout(iter, 1);
axis equal;
for i = 1:iter
    [mu, labels] = km(X, k);

    nexttile;
    hold on
    scatter(X(1,:), X(2,:),1, labels);
    scatter(mu(1,:), mu(2,:),[], 1:k, '^', 'filled');
    hold off
end

%% Part 5
% Which dataset do you believe k-means performed a better job clustering, on average? Why do you believe this is the
% case?
% **************************************************************************************
% I think it did better on the point clouds dataset. For the rings, we
% probably want to cluster each ring into a group, but k means divides up
% the rings like a pie. While it had a tendancy not to get the actual
% clusters correct each time for pointclouds, it still did a pretty good
% job and typically made some clusters similarly. While on the rings it
% performs very different and creates clusters that don't really reflect
% the physical characteristics.


%% Part 6
% Use the function im2rgb.m to read the pixel RGB values of either of the provided images (or pick an image of your
% own):
% [X,I,dims] = im2rgb('plane_small.png')
% Perform a k-means clustering of these color values (X) in R3 using ten clusters.
% **************************************************************************************
% Wow! This is fun. I like the 3D plot. It is completely impossible to read
% on the PDF in a meaningful way, but it is really interesting in the
% interactive one to rotate around. All the points seem to mostly lie on a
% plane, which is pretty interesting in itself. 


[X,I,dims] = im2rgb('plane_small.png');
k = 10;
[mu, labels] = km(X, k);

figure()

scatter3(X(1,:), X(2,:), X(3,:), 1, labels);
hold on
scatter3(mu(1,:), mu(2,:), mu(3,:), [], 1:k, '^', 'filled');
hold off

%% Part 7
% Generate and turn in the image produced by setting each pixel color to the centroid of the class it belongs to. This can
% be accomplished with the command:
% imshow(rgb2im(mu(:,labels), dims))
% where mu contains the learned centroid values, labels contains the learned class assignments, and dims is the image
% dimensions from im2rgb. Show the original image, for comparison:
% imshow(I)
% **************************************************************************************
% WOW! Look at that! It did such a good job. I really did not expect that.
% The clustered image is still definitely recognizeable! That is super
% neat. I thought part 6 was cool, but this is definitely more cool. It is
% very impressive how it is able to preserve the objects together. Like the
% body of the planes are both one cluster, and the tail fin, and even the
% NASA lettering. 

figure()
tiledlayout(2,1);
nexttile;
imshow(rgb2im(mu(:,labels), dims));
nexttile;
imshow(I);



















